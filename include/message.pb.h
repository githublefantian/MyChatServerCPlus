// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class climessage;

// ===================================================================

class climessage : public ::google::protobuf::Message {
 public:
  climessage();
  virtual ~climessage();

  climessage(const climessage& from);

  inline climessage& operator=(const climessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const climessage& default_instance();

  void Swap(climessage* other);

  // implements Message ----------------------------------------------

  climessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const climessage& from);
  void MergeFrom(const climessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 fromUid = 3;
  inline bool has_fromuid() const;
  inline void clear_fromuid();
  static const int kFromUidFieldNumber = 3;
  inline ::google::protobuf::int32 fromuid() const;
  inline void set_fromuid(::google::protobuf::int32 value);

  // required int32 gotoUid = 4;
  inline bool has_gotouid() const;
  inline void clear_gotouid();
  static const int kGotoUidFieldNumber = 4;
  inline ::google::protobuf::int32 gotouid() const;
  inline void set_gotouid(::google::protobuf::int32 value);

  // required string sendMessage = 5;
  inline bool has_sendmessage() const;
  inline void clear_sendmessage();
  static const int kSendMessageFieldNumber = 5;
  inline const ::std::string& sendmessage() const;
  inline void set_sendmessage(const ::std::string& value);
  inline void set_sendmessage(const char* value);
  inline void set_sendmessage(const char* value, size_t size);
  inline ::std::string* mutable_sendmessage();
  inline ::std::string* release_sendmessage();
  inline void set_allocated_sendmessage(::std::string* sendmessage);

  // @@protoc_insertion_point(class_scope:climessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fromuid();
  inline void clear_has_fromuid();
  inline void set_has_gotouid();
  inline void clear_has_gotouid();
  inline void set_has_sendmessage();
  inline void clear_has_sendmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 fromuid_;
  ::google::protobuf::int32 gotouid_;
  ::std::string* sendmessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static climessage* default_instance_;
};
// ===================================================================


// ===================================================================

// climessage

// required int32 id = 1;
inline bool climessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void climessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void climessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void climessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 climessage::id() const {
  return id_;
}
inline void climessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool climessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void climessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void climessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void climessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 climessage::type() const {
  return type_;
}
inline void climessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 fromUid = 3;
inline bool climessage::has_fromuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void climessage::set_has_fromuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void climessage::clear_has_fromuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void climessage::clear_fromuid() {
  fromuid_ = 0;
  clear_has_fromuid();
}
inline ::google::protobuf::int32 climessage::fromuid() const {
  return fromuid_;
}
inline void climessage::set_fromuid(::google::protobuf::int32 value) {
  set_has_fromuid();
  fromuid_ = value;
}

// required int32 gotoUid = 4;
inline bool climessage::has_gotouid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void climessage::set_has_gotouid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void climessage::clear_has_gotouid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void climessage::clear_gotouid() {
  gotouid_ = 0;
  clear_has_gotouid();
}
inline ::google::protobuf::int32 climessage::gotouid() const {
  return gotouid_;
}
inline void climessage::set_gotouid(::google::protobuf::int32 value) {
  set_has_gotouid();
  gotouid_ = value;
}

// required string sendMessage = 5;
inline bool climessage::has_sendmessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void climessage::set_has_sendmessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void climessage::clear_has_sendmessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void climessage::clear_sendmessage() {
  if (sendmessage_ != &::google::protobuf::internal::kEmptyString) {
    sendmessage_->clear();
  }
  clear_has_sendmessage();
}
inline const ::std::string& climessage::sendmessage() const {
  return *sendmessage_;
}
inline void climessage::set_sendmessage(const ::std::string& value) {
  set_has_sendmessage();
  if (sendmessage_ == &::google::protobuf::internal::kEmptyString) {
    sendmessage_ = new ::std::string;
  }
  sendmessage_->assign(value);
}
inline void climessage::set_sendmessage(const char* value) {
  set_has_sendmessage();
  if (sendmessage_ == &::google::protobuf::internal::kEmptyString) {
    sendmessage_ = new ::std::string;
  }
  sendmessage_->assign(value);
}
inline void climessage::set_sendmessage(const char* value, size_t size) {
  set_has_sendmessage();
  if (sendmessage_ == &::google::protobuf::internal::kEmptyString) {
    sendmessage_ = new ::std::string;
  }
  sendmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* climessage::mutable_sendmessage() {
  set_has_sendmessage();
  if (sendmessage_ == &::google::protobuf::internal::kEmptyString) {
    sendmessage_ = new ::std::string;
  }
  return sendmessage_;
}
inline ::std::string* climessage::release_sendmessage() {
  clear_has_sendmessage();
  if (sendmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendmessage_;
    sendmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void climessage::set_allocated_sendmessage(::std::string* sendmessage) {
  if (sendmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete sendmessage_;
  }
  if (sendmessage) {
    set_has_sendmessage();
    sendmessage_ = sendmessage;
  } else {
    clear_has_sendmessage();
    sendmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
