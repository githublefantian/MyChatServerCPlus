// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_check.proto

#ifndef PROTOBUF_login_5fcheck_2eproto__INCLUDED
#define PROTOBUF_login_5fcheck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_5fcheck_2eproto();
void protobuf_AssignDesc_login_5fcheck_2eproto();
void protobuf_ShutdownFile_login_5fcheck_2eproto();

class login_check;

// ===================================================================

class login_check : public ::google::protobuf::Message {
 public:
  login_check();
  virtual ~login_check();

  login_check(const login_check& from);

  inline login_check& operator=(const login_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_check& default_instance();

  void Swap(login_check* other);

  // implements Message ----------------------------------------------

  login_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_check& from);
  void MergeFrom(const login_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional string pass = 3;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 3;
  inline const ::std::string& pass() const;
  inline void set_pass(const ::std::string& value);
  inline void set_pass(const char* value);
  inline void set_pass(const char* value, size_t size);
  inline ::std::string* mutable_pass();
  inline ::std::string* release_pass();
  inline void set_allocated_pass(::std::string* pass);

  // @@protoc_insertion_point(class_scope:login_check)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uname_;
  ::std::string* pass_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_5fcheck_2eproto();
  friend void protobuf_AssignDesc_login_5fcheck_2eproto();
  friend void protobuf_ShutdownFile_login_5fcheck_2eproto();

  void InitAsDefaultInstance();
  static login_check* default_instance_;
};
// ===================================================================


// ===================================================================

// login_check

// required int32 id = 1;
inline bool login_check::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_check::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_check::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_check::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 login_check::id() const {
  return id_;
}
inline void login_check::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string uname = 2;
inline bool login_check::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_check::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_check::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_check::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& login_check::uname() const {
  return *uname_;
}
inline void login_check::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void login_check::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void login_check::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_check::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* login_check::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_check::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pass = 3;
inline bool login_check::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_check::set_has_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_check::clear_has_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_check::clear_pass() {
  if (pass_ != &::google::protobuf::internal::kEmptyString) {
    pass_->clear();
  }
  clear_has_pass();
}
inline const ::std::string& login_check::pass() const {
  return *pass_;
}
inline void login_check::set_pass(const ::std::string& value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::kEmptyString) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void login_check::set_pass(const char* value) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::kEmptyString) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void login_check::set_pass(const char* value, size_t size) {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::kEmptyString) {
    pass_ = new ::std::string;
  }
  pass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_check::mutable_pass() {
  set_has_pass();
  if (pass_ == &::google::protobuf::internal::kEmptyString) {
    pass_ = new ::std::string;
  }
  return pass_;
}
inline ::std::string* login_check::release_pass() {
  clear_has_pass();
  if (pass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pass_;
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_check::set_allocated_pass(::std::string* pass) {
  if (pass_ != &::google::protobuf::internal::kEmptyString) {
    delete pass_;
  }
  if (pass) {
    set_has_pass();
    pass_ = pass;
  } else {
    clear_has_pass();
    pass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_5fcheck_2eproto__INCLUDED
